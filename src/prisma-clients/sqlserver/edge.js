
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});


exports.Prisma.ModelName = {

};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\jtaborda\\Desktop\\Apps\\backend-sge-app\\src\\prisma-clients\\sqlserver",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\jtaborda\\Desktop\\Apps\\backend-sge-app\\prisma\\sqlserver\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma/sqlserver",
  "clientVersion": "6.14.0",
  "engineVersion": "717184b7b35ea05dfa71a3236b7af656013e1e49",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlserver",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "SQLSERVER_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../../src/prisma-clients/sqlserver\"\n}\n\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"SQLSERVER_DATABASE_URL\")\n}\n\n/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.\nmodel documhever {\n  tipodoc String @db.Char(4)\n  factnum Int\n  coalma  String @db.Char(6)\n  nrodoc  Int\n  nrodvc  Int\n\n  @@ignore\n}\n\n/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.\nmodel resumen {\n  modulo      String    @db.Char(10)\n  empresa     String    @db.Char(10)\n  tiporec     Int       @db.SmallInt\n  renglon     String    @db.Char(20)\n  codcli      String    @db.Char(20)\n  clides      String?   @db.Char(100)\n  moneda      String    @db.Char(6)\n  monto       Decimal   @db.Decimal(18, 2)\n  actualizado DateTime  @db.DateTime\n  codalma     String    @db.Char(6)\n  orden       Int       @db.SmallInt\n  stock_act   Decimal?  @default(0, map: \"DF__resumen2__stock___267ABA7A\") @db.Decimal(18, 5)\n  ult_cos_om  Decimal?  @default(0, map: \"DF__resumen2__ult_co__276EDEB3\") @db.Decimal(18, 5)\n  fec_ult_om  DateTime? @db.Date\n\n  @@ignore\n}\n\n/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.\nmodel resumenOLD {\n  modulo      String   @db.Char(10)\n  empresa     String   @db.Char(10)\n  tiporec     Int      @db.SmallInt\n  renglon     String   @db.Char(20)\n  codcli      String   @db.Char(20)\n  clides      String?  @db.Char(100)\n  moneda      String   @db.Char(6)\n  monto       Decimal  @db.Decimal(18, 2)\n  actualizado DateTime @db.DateTime\n  codalma     String   @db.Char(6)\n  orden       Int      @db.SmallInt\n\n  @@ignore\n}\n",
  "inlineSchemaHash": "1616fd7864631af2e42f22ea3f007e1cf3cc65009b0799f09571c3017cb84695",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    SQLSERVER_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['SQLSERVER_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.SQLSERVER_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

