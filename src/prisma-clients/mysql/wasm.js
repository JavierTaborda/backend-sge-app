
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CbdevolucionesScalarFieldEnum = {
  devonum: 'devonum',
  fecha: 'fecha',
  estatus: 'estatus',
  codcli: 'codcli',
  motivo: 'motivo',
  tipo: 'tipo',
  chofer: 'chofer'
};

exports.Prisma.CbplanpagosScalarFieldEnum = {
  planpagonumero: 'planpagonumero',
  unidad: 'unidad',
  empresa: 'empresa',
  fechapagoautorizada: 'fechapagoautorizada',
  descripcionplan: 'descripcionplan',
  fechaautorizadopor: 'fechaautorizadopor',
  autorizadopor: 'autorizadopor',
  totalnetobsd: 'totalnetobsd',
  totalnetousd: 'totalnetousd',
  totalsaldobsd: 'totalsaldobsd',
  totalsaldousd: 'totalsaldousd',
  totalautorizadobsd: 'totalautorizadobsd',
  totalautorizadousd: 'totalautorizadousd',
  totalpagadobsd: 'totalpagadobsd',
  totalpagadousd: 'totalpagadousd',
  totalxpagarbsd: 'totalxpagarbsd',
  totalxpagarusd: 'totalxpagarusd',
  generadotxt: 'generadotxt',
  conciliadopago: 'conciliadopago',
  owneruser: 'owneruser'
};

exports.Prisma.CbsolicimatScalarFieldEnum = {
  solicitudnumero: 'solicitudnumero',
  empresa: 'empresa',
  codigoobra: 'codigoobra',
  descripcionobra: 'descripcionobra',
  numerocontrol: 'numerocontrol',
  solicitanteuser: 'solicitanteuser',
  solicitantecodigo: 'solicitantecodigo',
  fechasolicitud: 'fechasolicitud',
  fechautilizacion: 'fechautilizacion',
  observacion: 'observacion',
  actividad: 'actividad',
  direccionentrega: 'direccionentrega',
  fecharevisado: 'fecharevisado',
  revisadopor: 'revisadopor',
  registradopor: 'registradopor',
  revisado: 'revisado',
  procesado: 'procesado',
  anulado: 'anulado'
};

exports.Prisma.ClbancoprovScalarFieldEnum = {
  numerocuenta: 'numerocuenta',
  beneficiario: 'beneficiario',
  titularcuenta: 'titularcuenta',
  cuentabanco: 'cuentabanco',
  banco: 'banco',
  codigobanco: 'codigobanco',
  codigoswift: 'codigoswift',
  tipocuenta: 'tipocuenta',
  rifproveedor: 'rifproveedor'
};

exports.Prisma.ClbancoswiftScalarFieldEnum = {
  codigobanco: 'codigobanco',
  codigoswift: 'codigoswift',
  nombrecorto: 'nombrecorto',
  tipocuenta: 'tipocuenta'
};

exports.Prisma.ClcategoriaScalarFieldEnum = {
  codcat: 'codcat',
  catdes: 'catdes'
};

exports.Prisma.CltransporteScalarFieldEnum = {
  codtran: 'codtran',
  trandes: 'trandes',
  chofer: 'chofer'
};

exports.Prisma.ClzonasScalarFieldEnum = {
  codzon: 'codzon',
  zondes: 'zondes'
};

exports.Prisma.DtdevolucionScalarFieldEnum = {
  devnum: 'devnum',
  estatus: 'estatus',
  comentario: 'comentario',
  descrip: 'descrip',
  saldo: 'saldo',
  fecemis: 'fecemis',
  fecvenc: 'fecvenc',
  codcli: 'codcli',
  codven: 'codven',
  codtran: 'codtran'
};

exports.Prisma.DtdevolucionesScalarFieldEnum = {
  itemnum: 'itemnum',
  devonum: 'devonum',
  codart: 'codart',
  serial: 'serial',
  descripcion: 'descripcion',
  cantidad: 'cantidad'
};

exports.Prisma.HsplanpagosScalarFieldEnum = {
  unidad: 'unidad',
  empresa: 'empresa',
  tipodocumento: 'tipodocumento',
  numerodocumento: 'numerodocumento',
  codigobeneficiario: 'codigobeneficiario',
  beneficiario: 'beneficiario',
  cuentabanco: 'cuentabanco',
  banco: 'banco',
  rifproveedor: 'rifproveedor',
  tipoproveedor: 'tipoproveedor',
  monedaproveedor: 'monedaproveedor',
  autorizadopagar: 'autorizadopagar',
  fechaemision: 'fechaemision',
  fechavencimiento: 'fechavencimiento',
  fecharegistro: 'fecharegistro',
  registradopor: 'registradopor',
  numerofactura: 'numerofactura',
  observacion: 'observacion',
  tasacambio: 'tasacambio',
  moneda: 'moneda',
  montoneto: 'montoneto',
  montosaldo: 'montosaldo',
  clasegasto: 'clasegasto',
  owneruser: 'owneruser'
};

exports.Prisma.MetasScalarFieldEnum = {
  anio: 'anio',
  mes: 'mes',
  codven: 'codven',
  codart: 'codart',
  asignado: 'asignado',
  utilizado: 'utilizado'
};

exports.Prisma.MtclientesScalarFieldEnum = {
  codcli: 'codcli',
  clides: 'clides',
  dirfiscal: 'dirfiscal',
  telefonos: 'telefonos',
  comentario: 'comentario',
  contacto: 'contacto',
  fecreg: 'fecreg',
  fecultvta: 'fecultvta',
  netoultvta: 'netoultvta',
  montocred: 'montocred',
  diascred: 'diascred',
  descppago: 'descppago',
  codzon: 'codzon',
  codseg: 'codseg',
  codven: 'codven',
  descglob: 'descglob',
  direntrega: 'direntrega',
  numrif: 'numrif',
  tipocli: 'tipocli',
  tipocon: 'tipocon',
  email: 'email',
  ciudad: 'ciudad',
  activo: 'activo',
  autorizado: 'autorizado',
  credito: 'credito',
  saldo: 'saldo'
};

exports.Prisma.MtprofitartScalarFieldEnum = {
  codart: 'codart',
  artdes: 'artdes',
  fecrec: 'fecrec',
  mseriales: 'mseriales',
  mlote: 'mlote',
  mgarantia: 'mgarantia',
  codlin: 'codlin',
  codcat: 'codcat',
  codsubl: 'codsubl',
  codcolor: 'codcolor',
  codbarra: 'codbarra',
  artref: 'artref',
  modelo: 'modelo',
  coment: 'coment',
  univenta: 'univenta',
  unicompra: 'unicompra',
  unirelac: 'unirelac',
  stockact: 'stockact',
  stockcom: 'stockcom',
  stocklle: 'stocklle',
  stockdes: 'stockdes',
  suniventa: 'suniventa',
  sunicompra: 'sunicompra',
  sunirelac: 'sunirelac',
  sstockact: 'sstockact',
  sstockcom: 'sstockcom',
  sstocklle: 'sstocklle',
  sstockdes: 'sstockdes',
  precioom: 'precioom',
  precvta1: 'precvta1',
  fecprecv1: 'fecprecv1',
  precvta2: 'precvta2',
  fecprecv2: 'fecprecv2',
  precvta3: 'precvta3',
  fecprecv3: 'fecprecv3',
  precvta4: 'precvta4',
  fecprecv4: 'fecprecv4',
  precvta5: 'precvta5',
  fecprecv5: 'fecprecv5',
  fecdesp5: 'fecdesp5',
  fechasp5: 'fechasp5',
  ultcosun: 'ultcosun',
  fultcosun: 'fultcosun',
  cosproun: 'cosproun',
  fcosproun: 'fcosproun',
  cosunan: 'cosunan',
  fcosunan: 'fcosunan',
  ultcosunom: 'ultcosunom',
  fultcosunom: 'fultcosunom',
  cosprounom: 'cosprounom',
  fcosprounom: 'fcosprounom',
  cosunanom: 'cosunanom',
  fcosunanom: 'fcosunanom',
  tipocosto: 'tipocosto',
  invfisico: 'invfisico',
  diasrepo: 'diasrepo',
  tipoart: 'tipoart',
  anulado: 'anulado',
  tipoimp: 'tipoimp',
  compuesto: 'compuesto',
  peso: 'peso',
  volumen: 'volumen',
  medalto: 'medalto',
  medancho: 'medancho',
  medlargo: 'medlargo'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.cbdevolucionesOrderByRelevanceFieldEnum = {
  codcli: 'codcli',
  motivo: 'motivo',
  chofer: 'chofer'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.cbplanpagosOrderByRelevanceFieldEnum = {
  unidad: 'unidad',
  empresa: 'empresa',
  descripcionplan: 'descripcionplan',
  autorizadopor: 'autorizadopor'
};

exports.Prisma.cbsolicimatOrderByRelevanceFieldEnum = {
  empresa: 'empresa',
  codigoobra: 'codigoobra',
  descripcionobra: 'descripcionobra',
  solicitanteuser: 'solicitanteuser',
  solicitantecodigo: 'solicitantecodigo',
  observacion: 'observacion',
  actividad: 'actividad',
  direccionentrega: 'direccionentrega',
  revisadopor: 'revisadopor',
  registradopor: 'registradopor'
};

exports.Prisma.clbancoprovOrderByRelevanceFieldEnum = {
  beneficiario: 'beneficiario',
  titularcuenta: 'titularcuenta',
  cuentabanco: 'cuentabanco',
  banco: 'banco',
  codigobanco: 'codigobanco',
  codigoswift: 'codigoswift',
  tipocuenta: 'tipocuenta',
  rifproveedor: 'rifproveedor'
};

exports.Prisma.clbancoswiftOrderByRelevanceFieldEnum = {
  codigobanco: 'codigobanco',
  codigoswift: 'codigoswift',
  nombrecorto: 'nombrecorto',
  tipocuenta: 'tipocuenta'
};

exports.Prisma.clcategoriaOrderByRelevanceFieldEnum = {
  codcat: 'codcat',
  catdes: 'catdes'
};

exports.Prisma.cltransporteOrderByRelevanceFieldEnum = {
  codtran: 'codtran',
  trandes: 'trandes',
  chofer: 'chofer'
};

exports.Prisma.clzonasOrderByRelevanceFieldEnum = {
  codzon: 'codzon',
  zondes: 'zondes'
};

exports.Prisma.dtdevolucionOrderByRelevanceFieldEnum = {
  estatus: 'estatus',
  comentario: 'comentario',
  descrip: 'descrip',
  codcli: 'codcli',
  codven: 'codven',
  codtran: 'codtran'
};

exports.Prisma.dtdevolucionesOrderByRelevanceFieldEnum = {
  codart: 'codart',
  serial: 'serial',
  descripcion: 'descripcion'
};

exports.Prisma.hsplanpagosOrderByRelevanceFieldEnum = {
  unidad: 'unidad',
  empresa: 'empresa',
  tipodocumento: 'tipodocumento',
  codigobeneficiario: 'codigobeneficiario',
  beneficiario: 'beneficiario',
  cuentabanco: 'cuentabanco',
  banco: 'banco',
  rifproveedor: 'rifproveedor',
  tipoproveedor: 'tipoproveedor',
  monedaproveedor: 'monedaproveedor',
  registradopor: 'registradopor',
  observacion: 'observacion',
  moneda: 'moneda',
  clasegasto: 'clasegasto'
};

exports.Prisma.metasOrderByRelevanceFieldEnum = {
  anio: 'anio',
  mes: 'mes',
  codven: 'codven',
  codart: 'codart'
};

exports.Prisma.mtclientesOrderByRelevanceFieldEnum = {
  codcli: 'codcli',
  clides: 'clides',
  dirfiscal: 'dirfiscal',
  telefonos: 'telefonos',
  comentario: 'comentario',
  contacto: 'contacto',
  codzon: 'codzon',
  codseg: 'codseg',
  codven: 'codven',
  direntrega: 'direntrega',
  numrif: 'numrif',
  tipocli: 'tipocli',
  email: 'email',
  ciudad: 'ciudad'
};

exports.Prisma.mtprofitartOrderByRelevanceFieldEnum = {
  codart: 'codart',
  artdes: 'artdes',
  codlin: 'codlin',
  codcat: 'codcat',
  codsubl: 'codsubl',
  codcolor: 'codcolor',
  codbarra: 'codbarra',
  artref: 'artref',
  modelo: 'modelo',
  coment: 'coment',
  univenta: 'univenta',
  unicompra: 'unicompra',
  suniventa: 'suniventa',
  sunicompra: 'sunicompra',
  tipocosto: 'tipocosto',
  tipoart: 'tipoart',
  tipoimp: 'tipoimp'
};


exports.Prisma.ModelName = {
  cbdevoluciones: 'cbdevoluciones',
  cbplanpagos: 'cbplanpagos',
  cbsolicimat: 'cbsolicimat',
  clbancoprov: 'clbancoprov',
  clbancoswift: 'clbancoswift',
  clcategoria: 'clcategoria',
  cltransporte: 'cltransporte',
  clzonas: 'clzonas',
  dtdevolucion: 'dtdevolucion',
  dtdevoluciones: 'dtdevoluciones',
  hsplanpagos: 'hsplanpagos',
  metas: 'metas',
  mtclientes: 'mtclientes',
  mtprofitart: 'mtprofitart'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
